word = input('Введите существительное среднего рода с окончанием -о или -е ')
# ну тут все понятно, вводим необходимое нам слово (о и е - самые распространенные окончания, но есть и другие, но пох)
word = word.lower()                                              # делаем в этом слове все буквы в нижнем регистре

if word[-1] != 'о' and word[-1] != 'е':                          # проверяем, чтобы слово оканчивалось на нужные буквы
    print('Введите подходящее слово')

isklucheniya = ['племя', 'время', 'вымя', 'пламя', 'темя', 'знамя', 'имя', 'стремя', 'семя', 'дитя']

word1 = word[0:-1]                                               # удаляем последнюю букву (вместо нее будет окончание)
word2 = word[0:-2]
# вот эта фигня ниже - блок задач, он будет выполняться с любыми штуками, которые будешь подставлять в na_e(x, y) вместо
# x и y. сюда мы вписываем принты со всеми падежами, окончания взяла в инете, но для слов на о и е они работают всегда.
# соответственно, делаем шаблон действий, который будет выполняться для любой постановки
def na_e(x, y):
    print('В именительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + x + '\'')
    print('В родительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'я\'')
    print('В дательном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + x + '\'')
    print('В винительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'ю\'')
    print('В творительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'ем\'')
    print('В предложном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'е\'')

def na_o(a, b):
    print('В именительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + a + '\'')
    print('В родительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'а\'')
    print('В дательном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + a + '\'')
    print('В винительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'у\'')
    print('В творительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'ом\'')
    print('В предложном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'е\'')

def na_ya(x, y):
    print('В именительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + x + '\'')
    print('В родительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'ени\'')
    print('В дательном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'ени\'')
    print('В винительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + x + '\'')
    print('В творительном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'енем\'')
    print('В предложном падеже слово', '\'' + x + '\'', 'будет иметь форму', '\'' + y + 'ени\'')

def na_oe(a, b):
    print('В именительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + a + '\'')
    print('В родительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'ого\'')
    print('В дательном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'ому\'')
    print('В винительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + a + '\'')
    print('В творительном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'ым\'')
    print('В предложном падеже слово', '\'' + a + '\'', 'будет иметь форму', '\'' + b + 'ом\'')
# вот тут то мы и используем всю эту большую и страшную штуку выше, на место x/a подставляем слово оригинальное (не
# обрезанное), а вместо y/b у нас будет слово без последней бкувы, ее место займет окончание из принтов в дефах
if word[-1] == 'о':
    na_o(word, word1)
elif word[-2:] == 'ое':
    na_oe(word, word2)
elif word[-1] == 'е':
    na_e(word, word1)
elif word[-1] == 'я' and word in isklucheniya:
    na_ya(word, word1)
